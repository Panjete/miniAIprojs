2020CS10373 Rishi Jain
2020CS50426 Gurarmaan Singh Panjeta

estimator.py


The estimation is done using particle filtering, and we found that a particle set of 5000 particles optimises speed and accuracy both, which s what we have gone with.

The particles are initialised to a uniform distribution (initially, the StdCar can be anywhere).
Then, as measurements arrive from the noisy sensor, we figure out a circular region where the particle may be present (same radial distance).
With time, we (and the StdCars), move around, and some of the probabilities are found to be unlikely (since they are outside the grid/on a block).
The Transition probabilities are used to Compute the positions are computed from the prior beliefs.
Then, the current observation computes the viability of that state and accordingly allots a weight to that state
90% of the States are resampled as per the weights. 
The rest 10% are randomly distributed across the map. These come in handy in case our best estimate is wrong and quickly help us transition to the actual answer.




intelligentDriver.py

We use the mentioned createWorldGraph() function to make a graph of the grid.
 Then, only nodes are considered reachable whose corresponding edges have below a specified value of probabilities from any stdCar are considered for evaluating paths from the current position to the next checkpoint.

Once such a path is found, we move towards the next tile on that path.
If no such safe path is found, we stay put for some while before the surroundings clear up.

Accuracy is increased using some tricks as below:-

1) We predict the motion of non-parked cars with a single look-ahead, and try to avoid going into an impending crash

2) If we feel that regions of high probabilities surround the car, we drop the pursuit of the goal for some while and focus on not-crashing. When the surroundings clear up, we reprioritise.

3) To reduce impacts with the boundaries, we ensure that the targets (in case the next best move is to go into a grid-border tile)
 are set to the non-grid-border edges of the tile, so that we accommodate the slow turns of the car and not collide with the grid-boundaries.

4) To induce sharper turns, we target the average of (the next tile's center) and the (current position).

